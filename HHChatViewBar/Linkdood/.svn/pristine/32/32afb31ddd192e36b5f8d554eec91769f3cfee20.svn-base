/*!
 @class       LDRegisterListener
 @descript    sdk接口层访问对象
 @author      xiongqing.
 @version     1.3.0
 */

#import "IOSNativeClient.h"
@interface LDRegisterListener : NSObject{
    IOSNativeClient *client;
}

/*!
 * @method    init
 * @descript  创建SDK客户端
 * @param     空
 * @result    SDK客户端
 */
- (instancetype)init;

/*!
 * @method    initializeClient
 * @descript  通过缓存路径初始化sdk客户端
 * @param     path   缓存文件路径
 * @result    sdk客户端
 */
- (NSString*)initializeClient:(NSString*)path;

/*!
 * @method    registerApp
 * @descript  注册应用
 * @param     certificatePath   应用证书路径
 * @param     cacheFolder       应用缓存文件夹名称
 * @result    接口处理对象
 */
- (NSString*)registerApp:(NSString*)certificatePath onCacheFolder:(NSString*)cacheFolder;

/*!
 * @method    registerListerner
 * @descript  注册推送类消息
 * @param     msgCmd        接口类别
 * @param     completion    接口响应
 * @result    空
 */
-(void)registerListerner:(unsigned short)msgCmd completion:(void (^) (void *response))completion;

/*!
 * @method    sendRequestToSDK
 * @descript  发起接口请求
 * @param     msgCmd        接口类别
 * @param     reqData       接口请求对象
 * @param     completion    接口响应
 * @result    空
 */
-(void)sendRequestToSDK:(unsigned short)msgCmd postData:(LDObject*)reqData completion:(void (^) (void *response))completion;

/*!
 * @method    callbackByResponse
 * @descript  网络请求回调
 * @param     msgCmd        接口类别
 * @param     rspData       接口响应数据
 * @param     length        数据长度
 * @result    空
 */
-(void)callbackByResponse:(unsigned short)msgCmd responseData:(void *)rspData Length:(int)length;

/*!
 * @method    setLoginConfig
 * @descript  记录用户登录账号信息
 * @param     authModel     登录账号信息
 * @result    设置是否成功
 */
-(BOOL)setLoginConfig:(LDAuthModel*)authModel;

/*!
 * @method    getLoginConfig
 * @descript  获取最近登录账号信息
 * @param     空
 * @result    账号信息
 */
-(LDAuthModel*)getLoginConfig;

/*!
 * @method    getClientConfig
 * @descript  获取用户运行缓存信息
 * @param     空
 * @result    用户运行缓存信息
 */
- (NSDictionary*)getClientConfig;

/*!
 * @method    serveInfo
 * @descript  获取服务器信息
 * @param     serveName 服务器标识或者地址
 * @result    服务器信息
 */
- (NSDictionary*)serveInfo:(NSString*)serveName;

/*!
 * @method    applicationDidDormancy
 * @descript  通知sdk程序运行状态
 * @param     status    0代表打开，１代表关闭
 * @result    设置是否成功
 */
- (bool)applicationDidDormancy:(int)status;

/*!
 * @method    multiServers
 * @descript  获取子账号列表
 * @param     空
 * @result    子账号列表
 */
- (NSArray*)multiServers;

/*!
 * @method    bindMultiServeers
 * @descript  绑定子账号
 * @param     servers
              子账号列表
 * @result    绑定状态
 */
- (bool)bindMultiServers:(NSArray *)servers;

/*!
 * @method    switchClient
 * @descript  切换主账号时即是切换client
 * @param     client
              切换成主账号的client
 * @result    空
 */
- (void)switchClient:(IOSNativeClient*)multiClient;

/*!
 * @method    hostClient
 * @descript  当前账号实体client对象
 * @param     空
 * @result    账号实体
 */
- (IOSNativeClient*)hostClient;

/*!
 * @method    decryptFile
 * @descript  解密文件
 * @param     pSrcPath      文件地址
 * @param     pDestPath     解密后文件地址
 * @param     pKey          解密密钥
 * @result    解密是否成功
 */
- (bool)decryptFile:(const char*)pSrcPath toDestPath:(const char *)pDestPath withKey:(const char*)pKey;

/*!
 * @method    encryptFile
 * @descript  加密文件
 * @param     pSrcPath      源文件路径
 * @param     pDestPath     加密文件路径
 * @param     pKey          加密密钥
 * @result    加密是否成功
 */
- (bool)encryptFile:(const char*)pSrcPath toDestPath:(const char *)pDestPath withKey:(const char*)pKey;

@end
