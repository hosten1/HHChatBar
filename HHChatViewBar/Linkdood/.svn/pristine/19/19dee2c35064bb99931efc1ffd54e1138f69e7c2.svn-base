//
//  LDTaskMessageModel.m
//  SDKClient
//
//  Created by 王越 on 16/5/6.
//  Copyright © 2016年 VRV. All rights reserved.
//

#import "LDTaskMessageModel.h"

@implementation LDTaskMessageModel

- (instancetype)initWithTaskContent:(NSString*)taskContent
{
    if (self = [super init]) {
        self.messageType = MESSAGE_TYPE_TASK;
        self.message = taskContent;
    }
    return self;
}

-(void)setMsgProperties:(NSString *)msgProperties
{
    [super setMsgProperties:msgProperties];
    if ([msgProperties jsonType] == JSON_TYPE_DICTIONARY) {
        NSDictionary *setMsgDic = msgProperties.objectFromJSONString;
        self.timeTask = [setMsgDic objectForKey:@"timeTask"]?[[setMsgDic objectForKey:@"timeTask"] longLongValue]:0;
        self.isTask = [setMsgDic objectForKey:@"isTask"]?[[setMsgDic objectForKey:@"isTask"] longLongValue]:0;
        self.isFinish = [setMsgDic objectForKey:@"isFinish"]?[[setMsgDic objectForKey:@"isFinish"] longLongValue]:0;
    }
}

- (void)transformMessage{
    [super transformMessage];
}

- (void)transformString{
    NSMutableDictionary *imageDic = [NSMutableDictionary dictionaryWithCapacity:0];
    [imageDic setObject:self.message forKey:@"body"];
    self.message = [imageDic JSONString];
}

-(void)moveMessageTop:(void (^) (NSError *error))completion{
    [SDKClient sendRequestToSDK:imsdkldd::ldd_logic_cmd_topTaskMsg postData:self completion:^(void *response) {
        imsdk::resp_commonResult *result = (imsdk::resp_commonResult *)response;
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)makeTaskReaded:(void (^) (NSError *error))completion
{
    [SDKClient sendRequestToSDK:imsdkldd::ldd_logic_cmd_readTaskMsg postData:self completion:^(void *response) {
        imsdk::resp_commonResult *result = (imsdk::resp_commonResult *)response;
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)queryMessageBody:(void (^) (NSError *error))completion{
    [SDKClient sendRequestToSDK:imsdkldd::ldd_logic_cmd_getBodyTaskMsg postData:self completion:^(void *response) {
        imsdk::resp_commonResult *result = (imsdk::resp_commonResult *)response;
        self.message = [NSString stringWithCString:result->value_str.c_str() encoding:NSUTF8StringEncoding];
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)recoveryTask:(void (^) (NSError *error))completion{
    [SDKClient sendRequestToSDK:imsdkldd::ldd_logic_cmd_reCoveryTaskMsg postData:self completion:^(void *response) {
        imsdk::resp_commonResult *result = (imsdk::resp_commonResult *)response;
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)completeTask:(void (^) (NSError *error))completion{
    [SDKClient sendRequestToSDK:imsdkldd::ldd_logic_cmd_finishTaskMsg postData:self completion:^(void *response) {
        imsdk::resp_commonResult *result = (imsdk::resp_commonResult *)response;
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

- (void)replyMessages:(void (^) (NSError *error,LDChatListModel *taskList))completion
{
    [SDKClient sendRequestToSDK:imsdkldd::ldd_logic_cmd_getReceiveMsg postData:self completion:^(void *response) {
        imsdkldd::resp_getReceiveMsg *result = (imsdkldd::resp_getReceiveMsg *)response;
        NSError *error = [NSError errorWithResponse:result->code];
        if (!error) {
            LDChatListModel *chatList = [[LDChatListModel alloc] init];
            std::vector<imsdk::st_msgBean>::iterator iter;
            for (iter = result->vtReceiveMsgs.begin(); iter < result->vtReceiveMsgs.end(); iter++) {
                LDChatModel *chat = [LDChatModel modelWithStruct:&iter forStructType:struct_type_msgBean];
                [chatList updateItem:chat];
            }
            if (completion) {
                MainQue(completion(error,chatList););
            }
        }
    }];
}

-(void)transformToRequest:(void **)reqData witCmd:(unsigned short)cmd{
    [super transformToRequest:reqData witCmd:cmd];
    if (cmd == imsdkldd::ldd_logic_cmd_getBodyTaskMsg || cmd == imsdkldd::ldd_logic_cmd_reCoveryTaskMsg || cmd == imsdkldd::ldd_logic_cmd_finishTaskMsg || cmd == imsdkldd::ldd_logic_cmd_readTaskMsg) {
        imsdkldd::req_taskMsgCom *req = new imsdkldd::req_taskMsgCom();
        req->msgID = self.ID;
        *reqData = req;
        return;
    }
    if (cmd == imsdkldd::ldd_logic_cmd_topTaskMsg) {
        imsdkldd::req_topTaskMsg *req = new imsdkldd::req_topTaskMsg();
        req->msgID = self.ID;
        req->top = self.isTop;
        *reqData = req;
        return;
    }
    if (cmd == imsdkldd::ldd_logic_cmd_getReceiveMsg) {
        imsdkldd::req_taskMsgCom *req = new imsdkldd::req_taskMsgCom();
        req->msgID = self.ID;
        *reqData = req;
        return;
    }
}

+ (instancetype)modelWithStruct:(void *)structural forStructType:(struct_type)type
{
    imsdkldd::st_task *st_room = (imsdkldd::st_task*)structural;
    LDTaskMessageModel *task = [[LDTaskMessageModel alloc] init];
    task.ID = st_room->msgID;
    task.sendUserID = st_room->fromeUserID == 0?MYSELF.ID:st_room->fromeUserID;
    task.receTargetID = st_room->targetID;
    task.timestamp = st_room->sendTime;
    task.message = [NSString stringWithCString:st_room->body.c_str() encoding:NSUTF8StringEncoding];
    NSMutableArray *users = [NSMutableArray arrayWithArray:[[NSString stringWithCString:st_room->relatedUsers.c_str() encoding:NSUTF8StringEncoding] componentsSeparatedByString:@";"]];
    task.relatedUsers = users;
    task.timestamp = st_room->msgProperties.timeZone;
    task.timeTask = st_room->msgProperties.timeTask;
    task.isFinish = st_room->msgProperties.isFinish;
    task.isTask = st_room->msgProperties.isTask;
    task.isRead = st_room->msgProperties.isRead;
    task.isTop = st_room->top;
    return task;
}

-(void)dealloc
{
    objc_removeAssociatedObjects(self);
}

@end
