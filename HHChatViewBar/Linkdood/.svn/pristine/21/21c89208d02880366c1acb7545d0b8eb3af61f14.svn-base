//
//  LDPasswordStipulateModel+Extend.m
//  SDKClient
//
//  Created by 王越 on 16/4/26.
//  Copyright © 2016年 VRV. All rights reserved.
//

#import "LDPasswordStipulateModel+Extend.h"

@implementation LDPasswordStipulateModel (Extend)

-(void)requestPasswordRule:(void (^)(NSError *error))completion{
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_getPwRule postData:self completion:^(void *response) {
        imsdk::resp_pwRuleResult *result = (imsdk::resp_pwRuleResult *)response;
        if (result->code == 0) {
            self.stipulate = result->stipulate;
            [self getOptions];
        }
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)getOptions{
    if (self.stipulate == 0) {
        self.stipulate = 2080;
    }
    self.length = self.stipulate >> 8;
    NSMutableArray *options = [[NSMutableArray alloc]init];
    
    for(int i=0;i<6;i++){
        NSNumber *value = [[NSNumber alloc]initWithInteger:self.stipulate & (1 << i)];
        if (value.integerValue != 0){
            [options addObject:value];
        }
    }
    self.stipulateOptions = [NSArray arrayWithArray:options];
    [self setPwdRuleString];
}

-(BOOL)checkPasswordWithText:(NSString *)str{
    
    if (!str){
        return NO;
    }
    if (self.length > str.length) {
        return NO;
    }
    
    
    NSArray* termArray1 = [[NSArray alloc] initWithObjects:@"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", @"0", nil];
    NSArray* termArray2 = [[NSArray alloc] initWithObjects:@"a", @"b", @"c", @"d", @"e", @"f", @"g", @"h", @"i", @"j", @"k", @"l", @"m", @"n", @"o", @"p", @"q", @"r", @"s", @"t", @"u", @"v", @"w", @"x", @"y", @"z", nil];
    NSArray* termArray3 = [[NSArray alloc] initWithObjects:@"A", @"B", @"C", @"D", @"E", @"F", @"G", @"H", @"I", @"J", @"K", @"L", @"M", @"N", @"O", @"P", @"Q", @"R", @"S", @"T", @"U", @"V", @"W", @"X", @"Y", @"Z", nil];
    
    BOOL result1 = [self judgeRange:termArray1 Password:str];
    BOOL result2 = [self judgeRange:termArray2 Password:str];
    BOOL result3 = [self judgeRange:termArray3 Password:str];
    BOOL result4 = [self judgeRange:[termArray2 arrayByAddingObjectsFromArray:termArray3] Password:str];
    BOOL result5 = [self outRange:[[termArray2 arrayByAddingObjectsFromArray:termArray3]arrayByAddingObjectsFromArray:termArray1] Password:str];
    BOOL result6 = NO;
    
    for (NSNumber *num in self.stipulateOptions) {
        NSInteger option = [num integerValue];
        switch (option) {
            case PasswordOptionNumber:
                if (!result1) return NO;
                break;
            case PasswordOptionLower:
                if (!result2) return NO;
                break;
            case PasswordOptionUpper:
                if (!result3) return NO;
                break;
            case PasswordOptionAlphabets:
                if (!result4) return NO;
                break;
            case PasswordOptionSpecialChar:
                if (!result5) return NO;
                break;
            case PasswordOptionCanRegister:
                result6 = YES;
                break;
        }
    }
    if (!result6) return result6;
    return YES;
}

-(BOOL)judgeRange:(NSArray*) termArray Password:(NSString*) password
{
    NSRange range;
    BOOL result =NO;
    for(int i=0; i<[termArray count]; i++)
    {
        range = [password rangeOfString:[termArray objectAtIndex:i]];
        if(range.location != NSNotFound)
        {
            result =YES;
        }
    }
    return result;
}

-(BOOL)outRange:(NSArray*) termArray Password:(NSString*) password
{
    NSRange range;
    BOOL result =NO;
    NSMutableString *string = [[NSMutableString alloc]init];
    for (NSString *str in termArray) {
        [string appendString:str];
    }
    for(int i=0; i<password.length; i++)
    {
        NSString *temp = [NSString stringWithFormat:@"%c",[password characterAtIndex:i]];
        range = [string rangeOfString:temp];
        if(range.location == NSNotFound)
        {
            result =YES;
        }
    }
    return result;
}

-(void)setPwdRuleString{
    NSMutableString *hintStr = [NSMutableString stringWithFormat:@"%@%lu",@"您的密码需要设置为至少",(unsigned long)self.length];
    NSMutableString *str = [[NSMutableString alloc]init];
    BOOL canRegister = NO;
    for (NSNumber *num in self.stipulateOptions){
        switch ([num integerValue]) {
            case PasswordOptionNumber:
                [str appendString:@"数字、"];
                break;
            case PasswordOptionLower:
                [str appendString:@"小写字母、"];
                break;
            case PasswordOptionUpper:
                [str appendString:@"大写字母、"];
                break;
            case PasswordOptionAlphabets:
                [str appendString:@"字母、"];
                break;
            case PasswordOptionSpecialChar:
                [str appendString:@"特殊字符、"];
                break;
            case PasswordOptionCanRegister:
                canRegister = YES;
                break;
            default:
                break;
        }
    }
    if (!canRegister && self.operType == AuthOperRegister) {
        self.ruleStr = @"服务器已停止注册";
    }else{
        if((self.stipulateOptions.count == 1 && [(NSNumber *)[self.stipulateOptions firstObject] integerValue] == PasswordOptionCanRegister)){
            [hintStr appendString:@"位"];
        }else{
            [hintStr appendString:@"位，包含"];
        }
        if ([[str substringFromIndex:[str length]-1] isEqualToString:@"、"]){
            NSRange deleteRange = {[str length]-1, 1};
            if (deleteRange.location != NSNotFound) {
                [str deleteCharactersInRange:deleteRange];
            }
            [str appendString:@"。"];
            NSRange replaceRange = [str rangeOfString:@"、" options:NSBackwardsSearch];
            if (replaceRange.location != NSNotFound){
                [str replaceCharactersInRange:replaceRange withString:@"和"];
            }
        }
        [hintStr appendString:str];
        self.ruleStr = hintStr;
    }
}

@end
