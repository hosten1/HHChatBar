//
//  LDGroupMemberModel.m
//  SDKClient
//
//  Created by xiong qing on 16/2/1.
//  Copyright © 2016年 VRV. All rights reserved.
//

#import "LDGroupMemberModel.h"

@implementation LDGroupMemberModel

-(id)initWithID:(int64_t)itemID
{
    if (self = [super init]) {
        self.ID = itemID;
    }
    return self;
}

//获取群成员信息
-(void)getMemberDetail:(void (^) (NSError *error))completion
{
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_getGroupMemberInfo postData:self completion:^(void *response) {
        imsdk::resp_getGroupMemberInfo *resp = (imsdk::resp_getGroupMemberInfo *)response;
        self.birthday = resp->member.birthday;
        self.name = [NSString stringWithCString:resp->member.name.c_str() encoding:NSUTF8StringEncoding];
        self.nickID = [NSString stringWithCString:resp->member.nickID.c_str() encoding:NSUTF8StringEncoding];
        self.sign = [NSString stringWithCString:resp->member.sign.c_str() encoding:NSUTF8StringEncoding];
        
        NSMutableArray *phones = [[NSMutableArray alloc]init];
        std::vector<std::string>::iterator iter;
        for (iter = resp->member.phones.begin(); iter != resp->member.phones.end(); iter++) {
            [phones addObject:[NSString stringWithCString:iter->c_str() encoding:NSUTF8StringEncoding]];
        }
        self.phones = phones;
        
        NSMutableArray *emails = [[NSMutableArray alloc]init];
        for (iter = resp->member.emails.begin(); iter != resp->member.emails.end(); iter++) {
            [emails addObject:[NSString stringWithCString:iter->c_str() encoding:NSUTF8StringEncoding]];
        }
        self.emails = emails;
        self.sex = resp->member.info.sex;
        self.userType = resp->member.info.userType;
        self.ID = resp->member.info.userid;
        self.name = [NSString stringWithCString:resp->member.info.memberName.c_str() encoding:NSUTF8StringEncoding];
        self.avatar = [NSString stringWithCString:resp->member.info.avatar.c_str() encoding:NSUTF8StringEncoding];
        self.groupID = resp->member.shield.groupid;
        self.cardName = [NSString stringWithCString:resp->member.info.memberName.c_str() encoding:NSUTF8StringEncoding];
        if (self.ID == MYSELF.ID) {
            self.notificationContent = (notification_content)resp->member.shield.groupMessageContentMode;
        }
        NSError *error = [NSError errorWithResponse:resp->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)setGroupManager:(void (^) (NSError *error))completion
{
    [self setGroupMemberInfo:^(NSError *error) {
        if (error) {
            self.userType = 1;
        }
        if (completion) {
            MainQue(completion(error););
        }
    }];
}

-(void)setMemberCardName:(void (^) (NSError *error))completion
{
    if (self.cardName == nil){
        self.cardName = @"";
    }
    [self setGroupMemberInfo:^(NSError *error) {
        if (completion) {
            MainQue(completion(error););
        }
    }];
}

+(instancetype)modelWithStruct:(void *)structural forStructType:(struct_type)type
{
    imsdk::st_tinyGroupMemberBean *groupMemberBean = (imsdk::st_tinyGroupMemberBean*)structural;
    LDGroupMemberModel *member = [[LDGroupMemberModel alloc] initWithID:groupMemberBean->userid];
    [member setSex:groupMemberBean->sex];
    [member setUserType:groupMemberBean->userType];
    [member setName:[NSString stringWithCString:groupMemberBean->memberName.c_str() encoding:NSUTF8StringEncoding]];
    [member setCardName:[NSString stringWithCString:groupMemberBean->memberName.c_str() encoding:NSUTF8StringEncoding]];
    [member setAvatar:[NSString stringWithCString:groupMemberBean->avatar.c_str() encoding:NSUTF8StringEncoding]];
    return member;
}

- (void)transformToRequest:(void **)reqData witCmd:(unsigned short)cmd
{
    [super transformToRequest:reqData witCmd:cmd];
    
    if(cmd == imsdk::logic_cmd_getGroupMemberInfo){
        imsdk::req_getMemberInfo *req = new imsdk::req_getMemberInfo();
        req->groupid = self.groupID;
        req->memberid = self.ID;
        *reqData = req;
        return;
    }
    
    if (cmd == imsdk::logic_cmd_setGroupMemberInfo){
        imsdk::req_setGroupMemberInfo *req = new imsdk::req_setGroupMemberInfo();
        req->groupId = [LDClient sharedInstance].groupMembers.groupID;
        req->memberId = self.ID;
        
        if(self.userType != 0){
            int8_t type = self.userType;
            req->_set_memType(type);
        }
        
        if (self.cardName){
            std::string name = [self.cardName UTF8String];
            req->_set_memberName(name);
        }
        
        if (self.notificationContent != 0) {
            int8_t type = self.notificationContent;
            req->_set_groupMessageContentMode(type);
        }
        int8_t type = self.vSign;
        req->_set_vSign(type);
        *reqData = req;
        return;
    }
    if(cmd == imsdk::logic_cmd_setShieldGroupMessage){
        imsdk::req_setGroupShieldInfo *req = new imsdk::req_setGroupShieldInfo();
        req->groupid = self.groupID;
        req->receiveMsgType = self.notificationType;
        *reqData = req;
        return;
    }
}

@end
