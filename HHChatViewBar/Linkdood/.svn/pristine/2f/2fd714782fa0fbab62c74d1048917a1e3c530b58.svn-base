/*
 ──────▄▀▄─────▄▀▄
 ─────▄█░░▀▀▀▀▀░░█▄
 ─▄▄──█░░░░░░░░░░░█──▄▄
 █▄▄█─█░░▀░░┬░░▀░░█─█▄▄█
 */

#import "LDFaceToFaceModel.h"

typedef enum{
    GROUP_SEED = 1,
    GROUP_JOIN = 2,
    GROUP_EXIT = 3,
    GROUP_CREAT = 4,
    BUDDY_SEED = 8,
    BUDDY_JOIN = 5,
    BUDDY_EXIT = 6,
    BUDDY_ADD = 7
}F2FOperType;

@interface LDFaceToFaceModel()

@property (nonatomic,strong)CLLocation *location;

@property (nonatomic,strong,readwrite)NSString *password;

@property (nonatomic,strong)NSString *roomID;

@property (nonatomic,strong,readwrite) NSArray <LDUserModel *>* userList;

@property (nonatomic,strong) NSArray <LDUserModel *>* selectList;

@property (nonatomic,strong)NSString *verifyInfo;

@end

@implementation LDFaceToFaceModel{
    F2FOperType operType;
}

-(instancetype)init{
    if(self == [super init]){
        self.userList = [[NSArray alloc]init];
    }
    return self;
}

-(void)seedGroupRoomWithLocation:(CLLocation *)location
                      completion:(void (^)(NSError *error, NSString *password))completion{
    
    operType = GROUP_SEED;
    _location = location;
    
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;
        
        NSError *error = [NSError errorWithResponse:result->code];
        NSString *password = @"";
        
        if(result->code == 0){
            if(result->result = 1){
                password = [NSString stringWithCString:result->randomCode.c_str() encoding:NSUTF8StringEncoding];
                self.roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
                self.password = password;}
            else{
                self.roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
                std::vector<imsdk::st_smallUserBean>::iterator iterUser;
                NSMutableArray *users = [[NSMutableArray alloc]init];
                
                for (iterUser = result->userList.begin(); iterUser != result->userList.end(); iterUser++) {
                    imsdk::st_smallUserBean & tmp = *iterUser;
                    [users addObject:[self modelWithStruct:&tmp]];
                }
                _userList = [NSArray arrayWithArray:users];
            }
        }
        if (completion) {
            MainQue(completion(error,password);)
        }
    }];
}

-(void)joinGroupRoomWithLocation:(CLLocation *)location
                        password:(NSString*)password
                      completion:(void (^)(NSError *error, NSArray <LDUserModel*>*users))completion{
    operType = GROUP_JOIN;
    _location = location;
    _password = password;
    
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;

        NSError *error = [NSError errorWithResponse:result->code];
        
        if(result->code == 0){
            if (result->result == 1) {
                self.roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
                std::vector<imsdk::st_smallUserBean>::iterator iterUser;
                NSMutableArray *users = [[NSMutableArray alloc]init];
                
                for (iterUser = result->userList.begin(); iterUser != result->userList.end(); iterUser++) {
                    imsdk::st_smallUserBean & tmp = *iterUser;
                    [users addObject:[self modelWithStruct:&tmp]];
                }
                _userList = [NSArray arrayWithArray:users];
            }
            
            else{
                switch (result->result) {
                    case 2:
                        error = [NSError errorWithResponse:100001];
                        break;
                    case 3:
                        error = [NSError errorWithResponse:100002];
                        break;
                    case 4:
                        error = [NSError errorWithResponse:100003];
                        break;
                    default:
                        break;
                        
                }
            }
        }
        if (completion) {
            MainQue(completion(error,self.userList);)
        }
    }];
}

-(void)exitGroupRoom:(void (^)(NSError *error))completion{
    operType = GROUP_EXIT;
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;
        
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)createGroupWithInviteMembers:(NSArray <LDUserModel*>*)users
                         completion:(void (^)(NSError *error))completion{
    operType = GROUP_CREAT;
    _selectList = users;
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;
        
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}



-(void)seedBuddyRoomWithLocation:(CLLocation *)location
                      completion:(void (^)(NSError *error, NSString *password))completion{
    
    operType = BUDDY_SEED;
    _location = location;
    
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;
        
        NSError *error = [NSError errorWithResponse:result->code];
        NSString *password = @"";
        
        if(result->code == 0){
            if(result->result == 1){
                password = [NSString stringWithCString:result->randomCode.c_str() encoding:NSUTF8StringEncoding];
                self.roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
                self.password = password;
            }else{
                switch (result->result) {
                    case 2:
                        error = [NSError errorWithResponse:100001];
                        break;
                    case 3:
                        error = [NSError errorWithResponse:100002];
                        break;
                    case 4:
                        error = [NSError errorWithResponse:100003];
                        break;
                    default:
                        break;
                }
            }
        }
        if (completion) {
            MainQue(completion(error,password);)
        }
    }];
}

-(void)joinBuddyRoomWithLocation:(CLLocation *)location
                        password:(NSString*)password
                      completion:(void (^)(NSError *error, NSArray <LDUserModel*>*users))completion{
    operType = BUDDY_JOIN;
    _location = location;
    _password = password;
    
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;
        
        NSError *error = [NSError errorWithResponse:result->code];
        if(result->code == 0){
            if (result->result == 1) {
                _password = [NSString stringWithCString:result->randomCode.c_str() encoding:NSUTF8StringEncoding];
                self.roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
                std::vector<imsdk::st_smallUserBean>::iterator iterUser;
                NSMutableArray *users = [[NSMutableArray alloc]init];
                
                for (iterUser = result->userList.begin(); iterUser != result->userList.end(); iterUser++) {
                    imsdk::st_smallUserBean & tmp = *iterUser;
                    [users addObject:[self modelWithStruct:&tmp]];
                }
                _userList = [NSArray arrayWithArray:users];
            }else{
                switch (result->result) {
                    case 2:
                        error = [NSError errorWithResponse:100001];
                        break;
                    case 3:
                        error = [NSError errorWithResponse:100002];
                        break;
                    case 4:
                        error = [NSError errorWithResponse:100003];
                        break;
                    default:
                        break;
                }
            }
            
        }
        if (completion) {
            MainQue(completion(error,self.userList);)
        }
    }];
}

-(void)exitBuddyRoom:(void (^)(NSError *error))completion{
    operType = BUDDY_EXIT;
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;
        
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

-(void)addBuddysWithInviteMembers:(NSArray <LDUserModel*>*)users
                       verifyInfo:(NSString *)info
                       completion:(void (^)(NSError *error))completion{
    operType = BUDDY_ADD;
    _verifyInfo = info;
    _selectList = users;
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_faceToFaceJoin postData:self completion:^(void *response) {
        imsdk::resp_faceToFaceJoin *result = (imsdk::resp_faceToFaceJoin *)response;
        
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
    
}

-(void)userJoinedRoom:(UserJoinedMoniter)moniter{
    [SDKClient registerListerner:imsdk::logic_cmd_faceJoinGroup completion:^(void *response) {
        imsdk::resp_faceJoinGroup *result = (imsdk::resp_faceJoinGroup *)response;
        NSString *roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
        LDUserModel *user;
        if ([_roomID isEqualToString:roomID]) {
            NSMutableArray *array =[NSMutableArray arrayWithArray:_userList];
            user = [self modelWithStruct:&result->userInfo];
            [array addObject:user];
            _userList = [NSArray arrayWithArray:array];
        }
        if (moniter) {
            MainQue(moniter(user););
        }
    }];
    
    [SDKClient registerListerner:imsdk::logic_cmd_faceAddBuddy completion:^(void *response) {
        imsdk::resp_faceJoinGroup *result = (imsdk::resp_faceJoinGroup *)response;
        NSString *roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
        LDUserModel *user;
        if ([_roomID isEqualToString:roomID]) {
            NSMutableArray *array =[NSMutableArray arrayWithArray:_userList];
            user = [self modelWithStruct:&result->userInfo];
            [array addObject:user];
            _userList = [NSArray arrayWithArray:array];
        }
        if (moniter) {
            MainQue(moniter(user););
        }
    }];
}

-(void)userExitedRoom:(UserExitedMoniter)moniter{
    [SDKClient registerListerner:imsdk::logic_cmd_exitFaceJoinGroup completion:^(void *response) {
        imsdk::resp_exitFaceJoinGroup *result = (imsdk::resp_exitFaceJoinGroup *)response;
        NSString *roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
        int64_t userID = result->userId;
        if ([_roomID isEqualToString:roomID]) {
            NSMutableArray *array =[NSMutableArray arrayWithArray:_userList];
            LDUserModel *exitedUser;
            for (LDUserModel *user in array) {
                if(user.ID == userID){
                    exitedUser = user;
                }
            }
            if (exitedUser) {
                [array removeObject:exitedUser];
            }
            
            _userList = [NSArray arrayWithArray:array];
        }
        if (moniter) {
            MainQue(moniter(userID););
        }
    }];
    
    [SDKClient registerListerner:imsdk::logic_cmd_exitFaceAddBuddy completion:^(void *response) {
        imsdk::resp_exitFaceJoinGroup *result = (imsdk::resp_exitFaceJoinGroup *)response;
        NSString *roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
        int64_t userID = result->userId;
        if ([_roomID isEqualToString:roomID]) {
            NSMutableArray *array =[NSMutableArray arrayWithArray:_userList];
            LDUserModel *exitedUser;
            for (LDUserModel *user in array) {
                if(user.ID == userID){
                    exitedUser = user;
                }
            }
            if (exitedUser) {
                [array removeObject:exitedUser];
            }
            
            _userList = [NSArray arrayWithArray:array];
        }
        if (moniter) {
            MainQue(moniter(userID););
        }
    }];
}

-(void)groupCreated:(GroupCreatedMoniter)moniter{
    [SDKClient registerListerner:imsdk::logic_cmd_createFaceGroupSuccess completion:^(void *response) {
        imsdk::resp_createFaceGroupSuccess *result = (imsdk::resp_createFaceGroupSuccess *)response;
        NSString *roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
        int64_t groupID = 0;
        if ([_roomID isEqualToString:roomID]) {
            if (result->joinFlag == 1) {
                groupID = result->groupID;
            }
        }
        if (moniter) {
            MainQue(moniter(groupID););
        }
    }];
}

-(void)BuddyConfirmed:(BuddyConfirmedMoniter)moniter{
    [SDKClient registerListerner:imsdk::logic_cmd_faceAddBuddyConfirm completion:^(void *response) {
        imsdk::resp_createFaceGroupSuccess *result = (imsdk::resp_createFaceGroupSuccess *)response;
        NSString *roomID = [NSString stringWithCString:result->roomId.c_str() encoding:NSUTF8StringEncoding];
        BOOL flag = NO;
        if ([_roomID isEqualToString:roomID]) {
            if (result->joinFlag == 1) {
                flag = YES;
            }
        }
        if (moniter) {
            MainQue(moniter(flag););
        }
    }];
}


-(void)transformToRequest:(void **)reqData witCmd:(unsigned short)cmd{
    if (cmd == imsdk::logic_cmd_faceToFaceJoin) {
        imsdk::req_faceToFaceJoin *req = new imsdk::req_faceToFaceJoin();
        imsdk::st_faceToFaceBean *bean = new imsdk::st_faceToFaceBean();
        
        switch (operType) {
            case GROUP_SEED:
            {
                bean->uid = MYSELF.ID;
                bean->longitude = _location.coordinate.longitude;
                bean->latitude = _location.coordinate.latitude;
                bean->operation = 1;
                req->_set_faceToFace(*bean);
            }
                break;
            case GROUP_JOIN:
            {
                bean->uid = MYSELF.ID;
                bean->longitude = _location.coordinate.longitude;
                bean->latitude = _location.coordinate.latitude;
                bean->operation = 1;
                if (_password) {
                    std::string psd = [_password UTF8String];
                    bean->_set_passwd(psd);
                }
                req->_set_faceToFace(*bean);
            }
                break;
            case GROUP_EXIT:
            {
                int64_t userID = MYSELF.ID;
                req->_set_userId(userID);
                if (_roomID) {
                    std::string roomID = [_roomID UTF8String];
                    req->_set_roomId(roomID);
                }
            }
                break;
            case BUDDY_EXIT:
            {
                int64_t userID = MYSELF.ID;
                req->_set_userId(userID);
                if (_roomID) {
                    std::string roomID = [_roomID UTF8String];
                    req->_set_roomId(roomID);
                }
            }
                break;
            case GROUP_CREAT:
            {
                int64_t userID = MYSELF.ID;
                req->_set_userId(userID);
                if (_roomID) {
                    std::string roomID = [_roomID UTF8String];
                    req->_set_roomId(roomID);
                }
                int8_t groupLevel = 1;
                req->_set_groupLevel(groupLevel);
                std::vector<int64> users;
                
                for (LDUserModel *user in _selectList){
                    users.push_back(user.ID);
                }
                req->_set_userList(users);
            }
                break;
            case BUDDY_SEED:{
                operType = GROUP_SEED;
                bean->uid = MYSELF.ID;
                bean->longitude = _location.coordinate.longitude;
                bean->latitude = _location.coordinate.latitude;
                bean->operation = 2;
                req->_set_faceToFace(*bean);
            }
                break;
            case BUDDY_JOIN:{
                bean->uid = MYSELF.ID;
                bean->longitude = _location.coordinate.longitude;
                bean->latitude = _location.coordinate.latitude;
                bean->operation = 2;
                if (_password) {
                    std::string psd = [_password UTF8String];
                    bean->_set_passwd(psd);
                }
                req->_set_faceToFace(*bean);
            }
                break;
            case BUDDY_ADD:{
                int64_t userID = MYSELF.ID;
                req->_set_userId(userID);
                if (_roomID) {
                    std::string roomID = [_roomID UTF8String];
                    req->_set_roomId(roomID);
                }
                if(_verifyInfo){
                    std::string verifyInfo = [_verifyInfo UTF8String];
                    req->_set_verifyInfo(verifyInfo);
                }
                std::vector<int64> users;
                for (LDUserModel *user in _selectList){
                    users.push_back(user.ID);
                }
                req->_set_userList(users);
            }
                break;
            default:
                break;
        }
        
        req->type = operType;
        *reqData = req;
        return;
    }
}

-(void)callbackByResponse:(void *)rspData witCmd:(unsigned short)cmd{
    
}

-(LDUserModel *)modelWithStruct:(void *)structural{
    imsdk::st_smallUserBean *bean = (imsdk::st_smallUserBean*)structural;
    LDUserModel *user = [[LDUserModel alloc]init];
    user.name = [NSString stringWithCString:bean->name.c_str() encoding:NSUTF8StringEncoding];
    user.sex = bean->sex;
    user.avatar = [NSString stringWithCString:bean->portraitURL.c_str() encoding:NSUTF8StringEncoding];
    user.sign = [NSString stringWithCString:bean->sign.c_str() encoding:NSUTF8StringEncoding];
    user.ID = bean->userID;
    user.srcAvatar = [NSString stringWithCString:bean->oriPortraitURL.c_str() encoding:NSUTF8StringEncoding];
    
    std::vector<std::string>::iterator iter;

    if (bean->phoneNums.size() > 0) {
        for (iter = bean->phoneNums.begin(); iter != bean->phoneNums.end(); iter++) {
            [user.phones addObject:[NSString stringWithCString:iter->c_str() encoding:NSUTF8StringEncoding]];
        }
    }
    if (bean->emails.size() > 0) {
        for (iter = bean->emails.begin(); iter != bean->emails.end(); iter++) {
            [user.emails addObject:[NSString stringWithCString:iter->c_str() encoding:NSUTF8StringEncoding]];
        }
    }
    return user;
}

@end
