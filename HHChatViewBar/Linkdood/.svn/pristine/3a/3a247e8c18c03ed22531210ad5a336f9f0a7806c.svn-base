//
//  LDOrganizationContactListModel.m
//  SDKClient
//
//  Created by 熊清 on 16/7/15.
//  Copyright © 2016年 VRV. All rights reserved.
//

#import "LDOrganizationContactListModel.h"

@interface LDOrganizationContactListModel(){
    NSMutableDictionary *extend;
}

@end

@implementation LDOrganizationContactListModel

- (void)queryOrganizationContent:(LDOrganizationModel *)organization
                      completion:(void (^) (NSError *error))completion
{
    objc_setAssociatedObject(self, "updateFinish", completion, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    objc_setAssociatedObject(self, "org", organization, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    [SDKClient sendRequestToSDK:imsdkldd::ldd_logic_cmd_getVisibleOrgUsers postData:self completion:nil];//获取组织和成员
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_queryExtendedField postData:self completion:nil];//获取扩展信息
}

-(void)refreshOnlineType:(void (^) (NSError *error))completion{
    [SDKClient sendRequestToSDK:imsdk::logic_cmd_getBuddyOnline postData:self completion:^(void *response) {
        imsdk::resp_getBuddyOnlineResult *result = (imsdk::resp_getBuddyOnlineResult *)response;
        if (result->code == 0) {
            std::vector<imsdk::st_onlineState>::iterator iter;
            
            for (iter = result->obs.begin(); iter!=result->obs.end(); iter++) {
                LDEntpriseUserModel *user = (LDEntpriseUserModel *)[self itemWithID:iter->userID];
                if (user) {
                    user.deviceType = iter->deviceType;
                    user.onlineStatus = iter->flag;
                }
            }
        }
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error);)
        }
    }];
}

- (void)transformToRequest:(void **)reqData witCmd:(unsigned short)cmd{
    if (cmd == imsdkldd::ldd_logic_cmd_getVisibleOrgUsers) {
        imsdkldd::req_getVisibleOrgUsers *req = new imsdkldd::req_getVisibleOrgUsers();
        LDOrganizationModel *org = objc_getAssociatedObject(self, "org");
        req->orgID = org?org.ID:0;
        *reqData = req;
        return;
    }
    if (cmd == imsdk::logic_cmd_getBuddyOnline) {
        imsdk::req_getBuddyOnline *req = new imsdk::req_getBuddyOnline();
        [self.allItems enumerateObjectsUsingBlock:^(LDEntpriseUserModel *user, NSUInteger idx, BOOL *stop) {
            if([user isKindOfClass:[LDEntpriseUserModel class]]){
                req->member.push_back(user.ID);
            }
        }];
        *reqData = req;
        return;
    }
    if (cmd == imsdk::logic_cmd_queryExtendedField) {
        imsdk::req_queryExtendedField *req = new imsdk::req_queryExtendedField();
        req->type = 1;
        *reqData = req;
        return;
    }
}

-(void)callbackByResponse:(void *)rspData witCmd:(unsigned short)cmd{
    if (cmd == imsdkldd::ldd_logic_cmd_getVisibleOrgUsers) {
        imsdkldd::resp_getOrgUserAndChildNodes *result = (imsdkldd::resp_getOrgUserAndChildNodes *)rspData;
        if (result->code == 0) {
            [self clearItems];
            
            std::vector<imsdkldd::st_entpriseUserInfo>::iterator iterUser;
            for (iterUser = result->vtEntUser.begin(); iterUser != result->vtEntUser.end(); iterUser++) {
                imsdkldd::st_entpriseUserInfo &usr = *iterUser;
                LDEntpriseUserModel *user = [LDEntpriseUserModel modelWithStruct:&usr forStructType:struct_type_normal];
                [self updateItem:user];
            }
            
            std::vector<imsdkldd::st_organizationInfo>::iterator iterOrg;
            for (iterOrg = result->vtOrgInfo.begin(); iterOrg != result->vtOrgInfo.end(); iterOrg++) {
                LDOrganizationModel *orgInfo = [[LDOrganizationModel alloc]init];
                orgInfo.ID = iterOrg->orgID;
                orgInfo.enterpriseID = iterOrg->enterpriseID;
                orgInfo.leaf = iterOrg->leaf;
                orgInfo.parentOrgID = iterOrg->parentOrgID;
                orgInfo.orderNum = iterOrg->orderNum;
                orgInfo.branchID = iterOrg->branchID;
                orgInfo.departLevel = iterOrg->departLevel;
                orgInfo.subOrgNum = iterOrg->subOrgNum;
                orgInfo.subUserNum = iterOrg->subUserNum;
                orgInfo.isHidden = iterOrg->isHidden;
                orgInfo.provinceID = iterOrg->provinceID;
                orgInfo.cityID = iterOrg->cityID;
                orgInfo.areaID = iterOrg->areaID;
                orgInfo.orgName = [NSString stringWithCString:iterOrg->orgName.c_str() encoding:NSUTF8StringEncoding];
                orgInfo.orgCode = [NSString stringWithCString:iterOrg->orgCode.c_str() encoding:NSUTF8StringEncoding];
                orgInfo.remark = [NSString stringWithCString:iterOrg->remark.c_str() encoding:NSUTF8StringEncoding];
                orgInfo.departID = [NSString stringWithCString:iterOrg->departID.c_str() encoding:NSUTF8StringEncoding];
                orgInfo.provinceName = [NSString stringWithCString:iterOrg->provinceName.c_str() encoding:NSUTF8StringEncoding];
                orgInfo.cityName = [NSString stringWithCString:iterOrg->cityName.c_str() encoding:NSUTF8StringEncoding];
                orgInfo.areaName = [NSString stringWithCString:iterOrg->areaName.c_str() encoding:NSUTF8StringEncoding];
                [self updateItem:orgInfo];
            }
            [self assembleData];
        }
        void (^completion) (NSError *error) = objc_getAssociatedObject(self, "updateFinish");
        NSError *error = [NSError errorWithResponse:result->code];
        if (completion) {
            MainQue(completion(error););
        }
    }
    if (cmd == imsdk::logic_cmd_queryExtendedField) {
        imsdk::resp_queryExtendedField *result = (imsdk::resp_queryExtendedField*)rspData;
        if (result->code == 0) {
            if (!extend) {
                extend = [[NSMutableDictionary alloc] init];
            }else{
                [extend removeAllObjects];
            }
            std::vector<st_enterpriseDictionary>::iterator iter;
            for (iter = result->listEnDic.begin(); iter != result->listEnDic.end(); iter++) {
                NSString *key = [NSString stringWithCString:iter->dickey.c_str() encoding:NSUTF8StringEncoding];
                NSString *value = [NSString stringWithCString:iter->dicValue.c_str() encoding:NSUTF8StringEncoding];
                [extend setObject:value forKey:key];
            }
        }
    }
}

- (NSDictionary*)extendLocal
{
    return extend;
}

- (void)assembleData
{
    [sections removeAllObjects];
    [assembledItems removeAllObjects];
    [sections addObjectsFromArray:@[@"用户",@"组织"]];
    for (LDItemModel *item in items) {
        if([item isKindOfClass:[LDOrganizationModel class]]){
            if (![assembledItems objectForKey:@"组织"]) {
                [assembledItems setObject:[NSMutableArray arrayWithObject:item] forKey:@"组织"];
            }else{
                [[assembledItems objectForKey:@"组织"] addObject:item];
            }
        }
        if([item isKindOfClass:[LDEntpriseUserModel class]]){
            if (![assembledItems objectForKey:@"用户"]) {
                [assembledItems setObject:[NSMutableArray arrayWithObject:item] forKey:@"用户"];
            }else{
                [[assembledItems objectForKey:@"用户"] addObject:item];
            }
        }
    }
}

@end
